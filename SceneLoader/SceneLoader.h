/*
 Auteur : Letremble Emmanuel
 Date : 15.09.2011
 Description : This file contain the functions used to parse the .scene files exported from Blender

 - SceneLoader		[4] 16 bytes

///// ETA /////////////////////////////////////////////////////////////////////////////////////////
 * ToDo - Must finish the camera creation part
 * ToDo - Must finish shadow stuffs
 * ToDo - Should we remove the hello & goodbye cout ? or even replace them with a pout ?

 **************************************************************************************************/
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef HEADER_SCENE_LOADER
#define HEADER_SCENE_LOADER

//#include <iostream>
#include <string>

#include <OgreSceneManager.h>
#include <OgreEntity.h>
#include <OgreBillboardSet.h>
#include <OgreBillboard.h>

#include "../../com/tinyxml/tinyxml.h"

#include "../Utils/Utils.h"		// exe_path =, from_string

namespace hbt
{
//*************************************************************************************************/
///// SceneLoader /////////////////////////////////////////////////////////////////////////////////

	/** This class provides a way to parse Ogre3D .scene generated by Blender
		@ingroup fileloader */

	class SceneLoader
	{
		public:
			SceneLoader();
			///< A constructor.
			virtual ~SceneLoader();
			///< A destructor.

		//== Public functions ===============================

			virtual void open(const std::string _sceneFile, Ogre::SceneManager* _localSceneMgr, bool _setEntities = true, bool _setLights = true, bool _setCamera = false, float _offsetX = 0.0f, float _offsetY = 0.0f, float _offsetZ = 0.0f);
			///< Opens and parses an Ogre3D .scene file exported from Blender in order to recreate the scene content into a SceneNode.
			/// @param _sceneFile The .scene file to load. @param _localSceneMgr The SceneManager instance on which the main SceneNode will be attached to, and on which entities and lights will be created.
			/// @param _setEntities Defines whether the entities found in the file are created or not. @param _setLights Define whether the lights found in the file are created or not. @param _setCamera Define whether the cameras found in the file are created or not (NOT CURRENTLY ACTIVE).
			/// @param _offsetX Define the X offset to use when placing the created nodes. @param _offsetY Define the Y offset to use when placing the created nodes. @param _offsetZ Define the Z offset to use when placing the created nodes.

		//== Protected functions ============================

		protected:

			virtual Ogre::SceneNode* createNode(const std::string _name, Ogre::SceneNode* _sceneNode, TiXmlElement* _element, bool _setPos, bool _setRot, bool _setScale);
			///< Returns a SceneNode on which entities, lights and camera can be attached.
			/// @return The new SceneNode placed, scaled and rotated as requested. @param _name The name of the SceneNode.
			/// @param _sceneNode The SceneNode on which this new one should be created (it used to be the main SceneNode). @param _element The XML document part containing the position, scale and rotation informations.
			/// @param _setPos Defines whether or not the position informations should be applied. @param _setRot Defines whether or not the rotation informations should be applied. @param _setScale Defines whether or not the scale informations should be applied.

			virtual void createEntity(const std::string _name, Ogre::SceneManager* _localSceneMgr, Ogre::SceneNode* _sceneNode, TiXmlElement* _element);
			///< Create an Entity.
			/// @param _name The name of the Entity. @param _localSceneMgr The SceneManager instance on which the Entity will be created.
			/// @param _sceneNode The SceneNode on which the new SceneNode used to create this new Entity will be attached to (it used to be the main SceneNode).
			/// @param _element The XML document part containing the position, scale and rotation informations.

			virtual void createLight(const std::string _name, Ogre::SceneManager* _localSceneMgr, Ogre::SceneNode* _sceneNode, TiXmlElement* _element);
			///< Create a Light.
			/// @param _name The name of the Light. @param _localSceneMgr The SceneManager instance on which the Light will be created.
			/// @param _sceneNode The SceneNode on which the new SceneNode used to create this new Light will be attached to (it used to be the main SceneNode).
			/// @param _element The XML document part containing the position, scale and rotation informations.

		//public: int m_lightNumber;//[4]  4 bytes

		private:								// VIRTUAL		//[4]  4 bytes
			float m_offsetX;  									//[4]  4 bytes
			float m_offsetY;  									//[4]  4 bytes
			float m_offsetZ;  									//[4]  4 bytes | 0 byte padding
	};//--------------------------------------------------------->[4] 16 bytes

}

#endif

